{"version":3,"sources":["components/main.module.css","components/marker.module.css","components/stores/mainStore.js","components/map.jsx","components/Accident.jsx","ColorGradient.js","components/main.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","cluster","makeAutoObservable","this","toJS","console","log","polygon","properties","id","Zoom","bounds","map","useMap","useEffect","fitBounds","Map","children","MapContainer","style","height","center","zoom","zoomControl","TileLayer","attribution","url","L","Icon","Default","imagePath","Accident","position","icon","divIcon","className","css","marker","html","iconSize","iconAnchor","Marker","eventHandlers","click","emptyColor","undefinedColor","minColor","r","g","b","midColor","maxColor","getColorGradient","value","min","max","isInverted","undefined","color","colors","valueDiff","normalizedValue","percentage","p","Object","keys","forEach","key","h","Math","round","toString","slice","ChartJS","register","ArcElement","Tooltip","Legend","localizedProperties","dateTime","category","deadCount","injuredCount","Main","observer","selectedCluster","mainStore","useState","pedestrianAccidentsPercent","setPedestrianAccidentsPercent","accidentsLength","setAccidentsLength","clusterClickHandler","e","setSelectedCluster","clusters","clusterData","filter","accidents","length","accident","maxAccidentsLength","useMemo","geometry","coordinates","push","flat","coordinate","getBounds","renderClusters","pedestrianAccidents","GeoJSON","data","weight","categories","renderCharts","width","options","maintainAspectRatio","animation","duration","plugins","legend","display","labels","datasets","label","values","backgroundColor","borderColor","borderWidth","wrapper","Popup","entries","entry","property","Date","toLocaleDateString","sidebar","left","flexWrap","alignItems","justifyContent","marginTop","marginRight","type","step","placeholder","onChange","target","fontSize","textAlign","right","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d3dd1fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__3a3YK\",\"sidebar\":\"main_sidebar__2ET-6\",\"appear\":\"main_appear__5v2kn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"marker_marker__2JnP0\",\"appear\":\"marker_appear__2FX5G\"};","import { makeAutoObservable, toJS } from \"mobx\";\r\n\r\nclass MainStore {\r\n    cluster = null\r\n\r\n    get selectedCluster() {\r\n        return toJS(this.cluster);\r\n    }\r\n\r\n    setSelectedCluster(cluster) {\r\n        console.log(cluster, this.cluster)\r\n        if (this.cluster && this.cluster.polygon.properties.id === cluster.polygon.properties.id) this.cluster = null;\r\n        else this.cluster = cluster;\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n}\r\n\r\nexport default new MainStore();","import { useEffect } from 'react';\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\n\r\nconst Zoom = ({ bounds }) => {\r\n    const map = useMap();\r\n    useEffect(() => { if (bounds) map.fitBounds(bounds) }, bounds)\r\n    return null;\r\n}\r\n\r\nconst Map = ({ children, bounds }) => {\r\n    const position = [59.9323387, 30.3503255];\r\n    return <MapContainer\r\n        style={{ height: '100%' }}\r\n        center={position}\r\n        zoom={15}\r\n        zoomControl={false}\r\n    >\r\n        {bounds && <Zoom bounds={bounds} />}\r\n        <TileLayer\r\n            attribution='&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\"\r\n        />\r\n        {children}\r\n    </MapContainer>\r\n}\r\n\r\nexport default Map;","import L from 'leaflet';\r\nimport { Marker, Popup } from 'react-leaflet';\r\nimport css from './marker.module.css'\r\nL.Icon.Default.imagePath = \"https://unpkg.com/leaflet@1.5.0/dist/images/\";\r\n\r\nconst Accident = ({ children, position }) => {\r\n    let icon = L.divIcon({\r\n        className: css.marker,\r\n        html: `<div></div>`,\r\n        iconSize: [12, 12],\r\n        iconAnchor: [6, 6],\r\n    })\r\n    return <Marker\r\n        icon={icon}\r\n        position={[position[1], position[0]]}\r\n        eventHandlers={{\r\n            click: () => { },\r\n        }}\r\n    >\r\n        {children}\r\n    </Marker>\r\n}\r\n\r\nexport default Accident;","const emptyColor = '#e8e8e8'\r\nconst undefinedColor = '#a0a4a8'\r\nconst minColor = { r: 255, g: 236, b: 25 }\r\nconst midColor = { r: 255, g: 152, b: 0 }\r\nconst maxColor = { r: 246, g: 65, b: 45 }\r\n\r\nexport default function getColorGradient(value, min, max, isInverted = false) {\r\n    if (value < min || value > max) return undefinedColor;\r\n    if (value == null || value == undefined) return undefinedColor;\r\n    let color = { r: 0, g: 0, b: 0 };\r\n    let colors = [\r\n        minColor, //green\r\n        midColor, //yellow\r\n        maxColor //red\r\n    ]\r\n    let valueDiff = max - min;\r\n    if (valueDiff == 0) return emptyColor;\r\n    let normalizedValue = value - min;\r\n    if (isInverted) normalizedValue = valueDiff - normalizedValue;\r\n    let percentage = normalizedValue / valueDiff;\r\n    if (percentage <= 0.5) {\r\n        let p = percentage * 2;\r\n        Object.keys(color).forEach(key => {\r\n            color[key] = colors[0][key] + (colors[1][key] - colors[0][key]) * p;\r\n        });\r\n    }\r\n    else {\r\n        let p = (percentage - 0.5) * 2;\r\n        Object.keys(color).forEach(key => {\r\n            color[key] = colors[1][key] + (colors[2][key] - colors[1][key]) * p;\r\n        });\r\n    }\r\n    var h = Math.round(color.r) * 0x10000 + Math.round(color.g) * 0x100 + Math.round(color.b) * 0x1;\r\n    return '#' + ('000000' + h.toString(16)).slice(-6);\r\n}\r\n\r\nexport { minColor, midColor, maxColor };","import css from './main.module.css';\r\nimport React, { useEffect, useState, useMemo, useCallback } from 'react';\r\nimport mainStore from './stores/mainStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Map from './map';\r\nimport Accident from './Accident';\r\nimport clusterData from '../clusters.json';\r\nimport { GeoJSON, Popup } from 'react-leaflet';\r\nimport getColorGradient from '../ColorGradient';\r\nimport { polygon } from 'leaflet';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst localizedProperties = {\r\n    id: 'ID',\r\n    dateTime: 'Дата и время',\r\n    category: 'Категория',\r\n    deadCount: 'Кол-во погибших',\r\n    injuredCount: 'Количество пострадавших'\r\n}\r\n\r\nconst Main = observer(() => {\r\n    const selectedCluster = mainStore.selectedCluster;\r\n    const [pedestrianAccidentsPercent, setPedestrianAccidentsPercent] = useState(0);\r\n    const [accidentsLength, setAccidentsLength] = useState(1);\r\n\r\n    const clusterClickHandler = cluster => e => mainStore.setSelectedCluster(cluster);\r\n\r\n    const clusters = clusterData\r\n        .filter(cluster => cluster.accidents.length > accidentsLength)\r\n        .filter(cluster => {\r\n            const pedestrianAccidents = cluster.accidents.filter(accident => accident.properties.category === 'Наезд на пешехода');\r\n            const percent = 100.0 * pedestrianAccidents.length / cluster.accidents.length;\r\n            return percent >= pedestrianAccidentsPercent;\r\n        })\r\n\r\n    const maxAccidentsLength = useMemo(() => Math.max(...clusterData.map(cluster => cluster.accidents.length)), []);\r\n\r\n    const bounds = useMemo(() => {\r\n        const getBounds = (geometry) => {\r\n            let coordinates = geometry.coordinates.flat(2);\r\n            let bounds = [];\r\n            bounds.push([Math.min(...coordinates.map(coordinate => coordinate[1])),\r\n            Math.min(...coordinates.map(coordinate => coordinate[0]))])\r\n            bounds.push([Math.max(...coordinates.map(coordinate => coordinate[1])),\r\n            Math.max(...coordinates.map(coordinate => coordinate[0]))])\r\n            return bounds;\r\n        }\r\n        if (!mainStore.selectedCluster) return null;\r\n        let geometry = { coordinates: [] };\r\n        geometry.coordinates.push([...mainStore.selectedCluster.polygon.geometry.coordinates])\r\n        return getBounds(geometry);\r\n    }, [mainStore.selectedCluster])\r\n\r\n    const renderClusters = useMemo(() => clusters.map((cluster) => {\r\n        const pedestrianAccidents = cluster.accidents.filter(accident => accident.properties.category === 'Наезд на пешехода');\r\n        return <GeoJSON\r\n            key={`${cluster.polygon.properties.id}`}\r\n            data={cluster.polygon}\r\n            style={{\r\n                color: getColorGradient(1.0 * pedestrianAccidents.length / cluster.accidents.length, 0, 1),\r\n                weight: 4\r\n            }}\r\n            eventHandlers={{\r\n                click: clusterClickHandler(cluster)\r\n            }}\r\n        />\r\n    }), [accidentsLength, pedestrianAccidentsPercent]);\r\n\r\n    const categories = useMemo(() => {\r\n        let accidents = clusters.map(cluster => cluster.accidents).flat();\r\n        let data = {};\r\n        accidents.forEach(accident => {\r\n            if (!(accident.properties.category in data)) data[accident.properties.category] = 0;\r\n            data[accident.properties.category] += 1;\r\n        })\r\n        return Object.keys(data);\r\n    }, [])\r\n\r\n    const renderCharts = useMemo(() => {\r\n        let accidents = null;\r\n        let cluster = mainStore.selectedCluster;\r\n        if (cluster) accidents = cluster.accidents;\r\n        else accidents = clusters.map(cluster => cluster.accidents).flat();\r\n        let data = {};\r\n        categories.forEach(category => data[category] = 0)\r\n        accidents.forEach(accident => {\r\n            data[accident.properties.category] += 1;\r\n        })\r\n\r\n        return <div style={{ width: '100%', height: 300 }}>\r\n            <Pie\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    animation: {\r\n                        duration: 500\r\n                    },\r\n                    plugins: {\r\n                        legend: {\r\n                            display: false\r\n                        }\r\n                    }\r\n                }}\r\n                data={{\r\n                    labels: Object.keys(data),\r\n                    datasets: [\r\n                        {\r\n                            label: '# of Votes',\r\n                            data: Object.values(data),\r\n                            backgroundColor: [\r\n                                'rgba(255, 99, 132, 0.5)',\r\n                                'rgba(54, 162, 235, 0.5)',\r\n                                'rgba(255, 206, 86, 0.5)',\r\n                                'rgba(75, 192, 192, 0.5)',\r\n                                'rgba(153, 102, 255, 0.5)',\r\n                                'rgba(255, 159, 64, 0.5)',\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(255, 99, 132, 1)',\r\n                                'rgba(54, 162, 235, 1)',\r\n                                'rgba(255, 206, 86, 1)',\r\n                                'rgba(75, 192, 192, 1)',\r\n                                'rgba(153, 102, 255, 1)',\r\n                                'rgba(255, 159, 64, 1)',\r\n                            ],\r\n                            borderWidth: 1,\r\n                        },\r\n                    ],\r\n                }}\r\n            />\r\n        </div>\r\n    }, [mainStore.selectedCluster, accidentsLength, pedestrianAccidentsPercent])\r\n\r\n    return <section className={css.wrapper}>\r\n        <Map\r\n            bounds={bounds}\r\n        >\r\n            {renderClusters}\r\n            {selectedCluster && clusters.filter(cluster => cluster.polygon.properties.id === selectedCluster.polygon.properties.id).length > 0 && selectedCluster.accidents.map(accident => {\r\n\r\n                return <Accident\r\n                    properties={accident.properties}\r\n                    key={accident.properties.id}\r\n                    position={accident.geometry.coordinates}\r\n                >\r\n                    <Popup>{Object.entries(accident.properties).map(entry => {\r\n                        let property = localizedProperties[entry[0]];\r\n                        let value = property === localizedProperties.dateTime ? (new Date(entry[1])).toLocaleDateString() : entry[1];\r\n                        return <div key={entry[0]}>\r\n                            <b>{property}:</b> {value}\r\n                        </div>\r\n                    })}</Popup>\r\n                </Accident>\r\n            })}\r\n        </Map>\r\n        <div className={css.sidebar} style={{ left: 15 }}>\r\n            <h3>Карта ДТП</h3>\r\n            <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'flex-start', justifyContent: 'space-between' }}>\r\n                <div style={{}}></div>\r\n            </div>\r\n            <label style={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between', marginTop: 5 }}>\r\n                <span style={{ marginRight: 5 }}>Мин. процент столкновений с пешеходами</span>\r\n                <input type=\"number\" min=\"0\" max=\"100\" step=\"10\" placeholder='мин (%)' value={pedestrianAccidentsPercent} onChange={e => setPedestrianAccidentsPercent(e.target.value)} style={{ width: 60 }} />\r\n            </label>\r\n            <label style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginTop: 5 }}>\r\n                <span style={{ marginRight: 5 }}>Мин. количество ДТП в кластере</span>\r\n                <input type=\"number\" min=\"1\" max={maxAccidentsLength} placeholder='мин (%)' value={accidentsLength} onChange={e => setAccidentsLength(e.target.value)} style={{ width: 60 }} />\r\n            </label>\r\n            <div style={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between' }}>\r\n                <p style={{ fontSize: 10, marginTop: 30, width: '50%' }}>Представлены данные по городу Санкт-Петербург за 2019-2021 гг.</p>\r\n                <p style={{ fontSize: 10, marginTop: 30, width: '50%', textAlign: 'right' }}>Василий Стариков C4104</p>\r\n            </div>\r\n        </div>\r\n        {<div className={css.sidebar} style={{ right: 15 }}>\r\n            <h3>{mainStore.selectedCluster ? 'Текущий очаг ДТП' : 'Все очаги ДТП'}</h3>\r\n            {renderCharts}\r\n        </div>}\r\n    </section>\r\n})\r\n\r\nexport default Main;","import './App.css';\r\nimport Main from './components/main';\r\n\r\nfunction App() {\r\n  return <Main/>\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}